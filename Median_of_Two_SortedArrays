------------------------------------Solution 1---Standard merge Algorithm-------------------------------------------
Algorithm:

1.Declare one array of size equal to the length of two sorted arrays,
3.Declare three variables which points to the starting index of the  arrays.
2.Run a while until any one of the array iterates to end.
4.if the arr1 element is less than the arr2,then copy arr1 element to the new array,Increment the indexes by 1.
5.If the arr2 element is less than arr1,then copy arr2 element to the new array,Increment the indexes by 1.
6.Step 4 and 5 will runs until the end of while loop.
7.Copy the remaining elements in the large arrray to the new array.
8.Find the median and return it.


-----------------------------Code in JAVA-------------------------------------------
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        //Declaring variables 
        int[] arr =new int[nums1.length+nums2.length];
        int i=0,j=0,k=0;

        //Standard merge algorithm
        while(i<nums1.length && j<nums2.length){
            if(nums1[i]>nums2[j]){
               arr[k]=nums2[j];
               j++;
               k++;
            }
            else{
                arr[k]=nums1[i];
                i++;
                k++;
            }
        }
       if(i<nums1.length){
           while(i<nums1.length){
               arr[k]=nums1[i];
               i++;
               k++;
           }

       }
      else if(j<nums2.length){
         while(j<nums2.length){
             arr[k]=nums2[j];
             j++;
             k++;
         }
     }

    //Finding median
    if(arr.length%2!=0){
        return arr[arr.length/2];
    }
    else{
        //Here we have to put 2.0 because it takes floor division with out it
        return (arr[(arr.length/2)-1]+arr[arr.length/2])/2.0;
    }

        
    }
}

-----------------------------------COmplexity analysis-----------------------------------------------------
Time complexity:O(m+n)
Space complexity:O(m+n)

------------------------------------Test case 1---------------------------------------------------------
Input: nums1 =[1,3]  nums2 =[2]
Output: 2.00000
Expected: 2.00000

------------------------------------Test case 2---------------------------------------------------------
Input: nums1 =[1,2]  nums2 =[3,4]
Output: 2.50000
Expected: 2.50000

_____________________________________________________________________________________________________________________________________________________________________

-------------------------------Solution 2---------Binary search----------------------------------------------------

Algorithm:

1.Find the length of the smaller array of two.We will do binary search on smaller array.
2.For binary search we will have two pointers low=0,high=n1 (assuming m is length of smaller array).
3.Loop until low<=high.
4.Calculate the partition index(cut1) for nums1 array as (low+high)/2,similarly the partition index(cut2) for the nums2 array as (n1+n2+1)/2-cut1.
5.Find the max element in the left of nums1 and nums2, minimum element in the right of nums1 and nums2.
6.Now we have three cases
   (i) If left1<=right2 and left2<=right1 then we have to return the median based on (n1+n2) is even or not.
   (ii) else If left1>right2 we are too far on the right,we have to go left,so set high=cut1-1.
   (iii) else we are too far on the left,we have to go right,so set low=cut1+1.
   
 ------------------------------------------------------------------------------------------------------------------------------------ 


Explanation:
  
  arr1[]={1,3,4,7,10,12}
  arr2[]={2,3,6,15}
  
  n1=4,n2=6
  low=0,high=4
  cut1=0,cut2=0
  left1=0,right1=0,left2=0,right2=0
  
  Iteration 1:
                 cut1 = (low+high)/2 = 2
                 cut2 = (n1+n2+1)/2-cut1 = 3
                 
                 Arrays will be partitoned as 
                    1,3       4,7,10,12
                    2,3,6     15
                 
                 left1=3,left2=6,right1=4,right2=15
                 
                here left2>right1 so we have to move to right,so set low=cut1+1;
                
 Iteration 2:
               cut1 = (3+4)/2 = 3
               cut2 = 5-3 = 2
               
               Arrays will be partitioned as 
                  1,3,4    7,10,12
                  2,3      6,15
                  
              Here left1<=right2 and left2<=right1 so we have to find the median.
              n1+n2 is even so return the max ( (left1,left2)+min(right1,right2) )/2.0 as result. ie 5.0
              
---------------------------------------------------------------------------------------------------------------------------------------
----------------------------Code in JAVA-----------------------------------------------------------------------

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if(nums2.length<nums1.length)
          return findMedianSortedArrays(nums2,nums1);

        int cut1=0,cut2=0;
        int n1=nums1.length;
        int n2=nums2.length;
        int low=0,high=n1;
        int left1,left2,right1,right2;

        while(low<=high){
            cut1=(low+high)/2;
            cut2=(n1+n2+1)/2 - cut1;

            left1=(cut1==0)?Integer.MIN_VALUE:nums1[cut1-1];
            left2=(cut2==0)?Integer.MIN_VALUE:nums2[cut2-1];

            right1=(cut1==n1)?Integer.MAX_VALUE:nums1[cut1];
            right2=(cut2==n2)?Integer.MAX_VALUE:nums2[cut2];

            if(left1<=right2 && left2<=right1){
                if((n1+n2)%2==0)
                  return (Math.max(left1,left2)+Math.min(right1,right2))/2.0;
                else
                  return Math.max(left1,left2);
            }
            else if(left1>right2)
                high=cut1-1;
            else
              low=cut1+1;

        }
        return 0.0;
        
    }
}

------------------------------------------------------Complexity analysis--------------------------------------------------
Time complexity:O(n)
space Complexity:O(1)
                 
         
 
 
